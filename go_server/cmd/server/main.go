package main

import (
	"app-distribution-server-go/internal/application"
	"app-distribution-server-go/internal/infrastructure"
	"app-distribution-server-go/internal/interfaces"
	"log"
	"net/http"
	"strings"

	_ "app-distribution-server-go/docs" // docs is generated by Swag CLI
	httpSwagger "github.com/swaggo/http-swagger"
)

// @title App Distribution API
// @version 1.0
// @description This is a sample server for distributing mobile applications.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api
func main() {
	if err := infrastructure.InitStorage(); err != nil {
		log.Fatalf("Failed to initialize storage: %v", err)
	}

	repo := infrastructure.NewFileAppRepository()
	service := application.NewAppService(repo)
	handlers := interfaces.NewAppHandlers(service)

	http.HandleFunc("/api/apps", handlers.AppsHandler)
	http.HandleFunc("/api/apps/upload", handlers.UploadHandler)
	http.HandleFunc("/api/apps/", func(w http.ResponseWriter, r *http.Request) {
		if strings.HasSuffix(r.URL.Path, "/versions") {
			handlers.GetAllAppVersionsHandler(w, r)
		} else {
			handlers.GetLatestAppVersionHandler(w, r)
		}
	})
	http.HandleFunc("/swagger/", httpSwagger.WrapHandler)

	log.Println("Starting server on :8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}
